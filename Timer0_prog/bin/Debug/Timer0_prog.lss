
bin\Debug\Timer0_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007e  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU  16000000UL
#endif // F_CPU
#define led (1<<PINB5)

int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    DDRB|=(1<<DDB5);   /// led as a output
  88:	a4 e2       	ldi	r26, 0x24	; 36
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e4 e2       	ldi	r30, 0x24	; 36
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 62       	ori	r24, 0x20	; 32
  94:	8c 93       	st	X, r24
    OCR0A=250;               ///loading reg 250x64us=16ms
  96:	e7 e4       	ldi	r30, 0x47	; 71
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	80 83       	st	Z, r24
    ///TCNT0=0;
    ///TCCR0B=(1<<CS02)|(1<<CS00);   ///F_CPU/1024=64us
    TCCR0A =(1<<WGM01);        ///making CTC mode by setting this bit
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
     TCCR0B=(1<<CS02)|(1<<CS00);   ///F_CPU/1024=64us
  a6:	e5 e4       	ldi	r30, 0x45	; 69
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	80 83       	st	Z, r24
    TIMSK0=(1<<OCIE0A);   /// enable timer0 overflow flag in timer interrupt mask register
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
    sei();   ///  set interrupt enable
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x38>

000000ba <TIMER0_COMP_vect>:
//  {
//      TCNT0=6;
//      PORTB^=led;
//  }
ISR(TIMER0_COMP_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
    TCNT0=0;
  d8:	e6 e4       	ldi	r30, 0x46	; 70
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
    PORTB^=led;
  de:	a5 e2       	ldi	r26, 0x25	; 37
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e5 e2       	ldi	r30, 0x25	; 37
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	89 27       	eor	r24, r25
  ec:	8c 93       	st	X, r24
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
